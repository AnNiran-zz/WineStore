<?php
namespace Winestore\Models;

use Winestore\Domain\Sale;
use Winestore\Exceptions\DbException;
use PDO;

class SaleModel extends AbstractModel {
	const CLASSNAME = '\Winestore\Domain\Sale';
	
	public function getByUser(int $userId): array { # retrieve information for sales made by a specific user, provided their id;
		$query = 'SELECT * FROM sale WHERE s.customer_id = :user';
		$sth = $this->db->prepare($query);
		$sth->execute(['user' => $userId]);
		return $sth->fetchAll(PDO::FETCH_CLASS, self::CLASSNAME);
	}
	public function get(int $saleId): Sale { # retrieve information from the sales table, provided ID for a specific sale - fetch all information of the transaction; if the controller uses a getter of an empty property, the model will retrieve data from the database; 
		$query = 'SELECT * FROM sale WHERE id = :id';
		$sth = $this->db->prepare($query);
		$sth->execute(['id' => $saleId]);
		$sales = $sth->fetchAll(PDO::FETCH_CLASS, self::CLASSNAME);
		
		if (empty($sales)) {
			throw new NotFoundException('Sale not found.');
		}
		$sale = array_pop($sales);
		$query = <<SQL
			SELECT w.id, w.name, w.resource, w.price, sw.amount as stock, w.vintage_year
				FROM sale s
					LEFT JOIN sale_wine sw ON s.id = sw.sale_id
						WHERE s.id = :id
							SQL;
		$sth = $this->db->prepare($query);
		$sth->execute(['id' => $saleId]);
		$items = $sth->fetchAll(
		PDO::FETCH_CLASS, WineModel::CLASSNAME
		);
		$sale->setItems($items);
		return $sale;
	}
	public function create(Sale $sale) {
		# creates a sale in the database and adds the items for that sale in the sales table;
		$this->db->beginTransation();
		
		$query = <<SQL
			INSERT INTO sale(customer_id, date)
				VALUES(:id, NOW())
					SQL;
		$sth = $this->db->prepare($query);
		if (!$sth->execute(['id' => $sale->getCustomerId()])) {
			$this->db->rollBack();
			throw new DbException($sth->errorInfo()[2]);
		}
		$saleId = $this->db->lastInsertId();
		$query = <<SQL
			INSERT INTO sale_wine(sale_id, item_id, amount)
				VALUES(:sale, :item, amount)
					SQL;
		$sth = $this->db->prepare($query);
		$sth->bindValue('sale', $saleId);
		foreach ($sale->getItem() as $saleId => $amount) {
			$sth->bindValue('sale', $saleId);
			$sth->bindValue('amount', $amount);
			if (!$sth->execute()) {
				$this->db->rollBack();
				throw new DbException($sth->errorInfo()[2]);
			}
		}
		$this->db->comit();
	}
}	
	
?>
